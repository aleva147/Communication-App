// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  // Relations:
  rooms Room[]
  members Member[]
  channels Channel[]
}


model Room {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  // Relations:
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  channels Channel[]

  @@index([profileId])
}


enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  // Relations:
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  roomId String
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  messages Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  @@index([profileId])
  @@index([roomId])
}


enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  // Relations:
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  roomId String
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  
  messages Message[]

  @@index([profileId])
  @@index([roomId])
}



// Message je za poruke u sobi, DirectMessage je za direktne poruke u konverzaciji dva korisnika
model Message {
  id String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations:
  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  // Soft delete: kad korisnik obrise poruku, brisemo njen sadrzaj i stavljamo deleted na true. Ne brisemo objekat poruke iz baze.
  deleted Boolean @default(false)

  @@index([channelId])
  @@index([memberId])
}


model Conversation {
  id String @id @default(uuid())

  // Relations:
  memberOneId String
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([memberTwoId])
  @@unique([memberOneId, memberTwoId])
}


model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations:
  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  @@index([memberId])
  @@index([conversationId])
}